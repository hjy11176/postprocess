c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      integer e,eg

      udiff =0.
      utrans=0.

      return
      end
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'NEKUSE'          ! FF[XYZ]
      include 'PARALLEL'        ! GLLEL
      include 'SOLN'            ! V[XYZ]
      integer ix,iy,iz,ieg
      ffx = 0.0
      ffy = 0.0
      ffz = 0.0
	  
	  
!     add tripping

!     add sponge at the outlet
!      call spng_forcing(FFX,FFY,FFZ,ix,iy,iz,ieg)


      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      integer e,eg

      qvol   = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
!      implicit none
      include 'SIZE'            !
      include 'TOTAL'            !
!      include 'TSTEP'           ! ISTEP, lastep, time
!      include 'INPUT'           ! IF3D, PARAM
      parameter (lt=lx1*ly1*lz1*lelt)
      real l2(lx1,ly1,lz1,nelt)
      common /scrns/ vort(lt,3),w1(lt)
     &               ,w2(lt)
      common /myoutflow/ d(lx1,ly1,lz1,lelt),m1(lx1*ly1*lz1,lelt)

!      common /myblas/ ub(lx1,ly1,lz1,lelt),vb(lx1,ly1,lz1,lelt)
!      common /scrns/    dum(lx1*ly1*lz1*lelv)
!      common /blasiusr/ u(lx1,ly1,lz1,lelv),v(lx1,ly1,lz1,lelv)
!      common /blasiusg/ bin(lx1,ly1,lz1,lelv)
      common /gaaa/    wo1(lx1,ly1,lz1,lelv)
     &              ,  wo2(lx1,ly1,lz1,lelv)
     &              ,  wo3(lx1,ly1,lz1,lelv)
      integer bin
      real normu(50),normv(50)
c     strain rate variables definitions {{{
      real sij(ax1,ay1,az1,ldim,ldim)
     $   , ss(ax1,ay1,az1,lelt)
c     }}}
c     Velocity gradients {{{
      real dudx(ax1,ay1,az1,lelt)
     $   , dudy(ax1,ay1,az1,lelt)
     $   , dudz(ax1,ay1,az1,lelt)
     $   , dvdx(ax1,ay1,az1,lelt)
     $   , dvdy(ax1,ay1,az1,lelt)
     $   , dvdz(ax1,ay1,az1,lelt)
     $   , dwdx(ax1,ay1,az1,lelt)
     $   , dwdy(ax1,ay1,az1,lelt)
     $   , dwdz(ax1,ay1,az1,lelt)
      common /vgrad/ dudx, dudy, dudz, dvdx, dvdy, dvdz, dwdx
     $              , dwdy, dwdz
c     }}}
c     Velocity gradients {{{
      real dpdx(ax2,ay2,az2,lelt)
     $   , dpdy(ax2,ay2,az2,lelt)
     $   , dpdz(ax2,ay2,az2,lelt)
c     }}}


      real xmax,xmin,dx
      save xmax,xmin,dx

!      n = nx1*ny1*nz1*nelv

c
!      real m1
!      rq  = 1.
!      uin = 0.
! 	  call turb_outflow(d,m1,rq,uin)


c     Compute delta*

c      do i=1,n
c         dum(i) = 1.-vx(i,1,1,1)
c      enddo
c      tot_deficit = glsc2(dum,bm1,n)
c      xmin        = glmin(xm1,n)
c      xmax        = glmax(xm1,n)
c      delta_star  = tot_deficit/(xmax-xmin)
c      if (nid.eq.0) write(6,1) istep,time,delta_star,xmin,xmax
c    1 format(i8,1p4e13.5,'  blasius: delta*')

!     convert the binary data to readable form
      call gfldr('../tesblasius0.f00001')
 
      if (nid.eq.0) write(6,*) 'Calculating gradients'
!     write velocity gradient	
      call gradm1(dudx,dudy,dudz,vx)
      call gradm1(dvdx,dvdy,dvdz,vy)
      call gradm1(dwdx,dwdy,dwdz,vz)
!     Gradient of pressure calculated with subroutine for mesh1 although
!     should be on mesh2
      call gradm1(dpdx,dpdy,dpdz,pr)

      if (nid.eq.0) write(6,*) 'Calculating stress tensor'

!     write stress tensor
      do ie=1,nelv
         call comp_gije(sij,vx(1,1,1,ie),vy(1,1,1,ie),vz(1,1,1,ie),ie) !compute the gradient tensor
         call comp_sije(sij) !compute symetric part of the tensor
         call my_mag_tensor_e(ss(1,1,1,ie),sij(1,1,1,1,1)) !compute magnitude of the tensor
         call cmult(ss(1,1,1,ie),2.0,nxyz) !multiplyby a constant
      enddo

!    write reynolds stress
c      do j=1,nxyz*nelv
c        uu(j)=u(j)*u(j)
c        uv(j)=u(j)*v(j)
c        uz(j)=u(j)*w(j)
c        vv(j)=v(j)*v(j)
c        vw(j)=v(j)*w(j)
c        ww(j)=w(j)*w(j)
c      enddo

!    write the x, y, z, reynolds stress file
      if (nid.eq.0) write(6,*) 'Writing files'
      call outpost(dudx,dvdx,dwdx,dpdx,t,'grx')
      call outpost(dudy,dvdy,dwdy,dpdy,t,'gry')
      call outpost(dudz,dvdz,dwdz,dpdz,t,'grz')
c      call outpost(uu,uv,uz,vv,vw,ww,'res')

c      call copy(dudx,dudx1,nxyz*nelv)
c      call copy(dvdx,dvdx1,nxyz*nelv)
c      call copy(dwdx,dwdx1,nxyz*nelv)
c      call copy(dpdx,dpdx1,nxyz*nelv)
c      call copy(t,t1,nxyz*nelv)
c      call copy(dudy,dudy1,nxyz*nelv)
c      call copy(dvdy,dvdy1,nxyz*nelv)
c      call copy(dwdy,dwdy1,nxyz*nelv)
c      call copy(dudz,dudz1,nxyz*nelv)
c      call copy(dvdz,dvdz1,nxyz*nelv)
c      call copy(dwdz,dwdz1,nxyz*nelv)
     

      if (nid.eq.0) write(6,*) 'End of postprocessing'
      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      return
      end
c-----------------------------------------------------------------------

      subroutine my_mag_tensor_e(mag,aije)
c
c     Compute magnitude of tensor A_e for element e
c
c     mag(A_e) = 0.5 (A:A)
c
      include 'SIZE'
      REAL mag (lx1*ly1*lz1)
      REAL aije(lx1*ly1*lz1,ldim,ldim)
      
      nxyz = lx1*ly1*lz1
      
      call rzero(mag,nxyz)
       
      do 100 j=1,ldim
      do 100 i=1,ldim
      do 100 l=1,nxyz 
            mag(l) = mag(l) + 0.5*aije(l,i,j)*aije(l,i,j)
 100  continue
      
      return
      end      

c-----------------------------------------------------------------------
